scalar Date

# Query types

enum Genre {
  POETRY
  FICTION
  NON_FICTION
  DRAMA
}

interface Publication {
  id: ID!
  title: String!

  """
  A publication has at least one, but possibly more, authors.
  """
  author: [String!]!
  publicationDate: Date!
  readBy: [User!]!
}

type Article implements Publication {
  periodical: Publication!
}

type Book implements Publication {
  isbn: String!
  genre: Genre
}

type Periodical {
  id: ID!
  title: String!

  """
  A periodical has at least one, but possibly more, editors.
  """
  editor: [String!]!
  articles: [Article!]!
}

type User {
  id: ID!
  name: String!
  hasRead: [Publication!]!
}

# Input types

input BookInput {
  title: String!
  author: [String!]!
  publicationDate: Date!
  isbn: String!
  genre: Genre
}

input ArticleInput {
  title: String!
  author: [String!]!
  publicationDate: Date!
  periodicalID: ID!
}

# Root types

type Mutation {
  addArticle(article: ArticleInput): Article!
  addBook(publication: BookInput): Book!
  addPeriodical(title: String!, editor: [String!]!): Periodical!
  addUser(name: String!): User!
  markRead(publicationID: ID!, userID: ID!): Boolean!
}

type Query {
  periodicals: [Periodical!]!
  publications(after: Date, before: Date, genre: Genre): [Publication!]!
  users: [User!]!

  periodical(id: ID!): Periodical
  publication(id: ID!): Publication
  user(id: ID!): User
}
